package main

import "fmt"

//Паттерн "Абстрактная фабрика" (Abstract Factory) - это порождающий паттерн проектирования,
//который предоставляет интерфейс для создания семейств взаимосвязанных объектов без указания их конкретных классов.
//Паттерн "Абстрактная фабрика" используется в следующих случаях:
//
//Когда необходимо создать семейства взаимосвязанных объектов, которые могут иметь разные реализации, без привязки к конкретным классам объектов. Это обеспечивает гибкость и удобство при создании объектов и их использовании.
//Когда система должна быть независимой от того, как создаются, компонуются и представляются её продукты.
//Когда необходимо предоставить множество вариантов продуктов, которые могут быть использованы вместе, без указания их конкретных классов.
//
//Отличия между паттернами "Абстрактная фабрика" и "Фабрика":
//
//"Абстрактная фабрика" создает семейства взаимосвязанных объектов, в то время как "Фабрика" создает одиночные объекты.
//"Абстрактная фабрика" подходит для создания объектов, которые взаимодействуют друг с другом или имеют общие зависимости,
//в то время как "Фабрика" используется для создания объектов, которые могут быть независимыми и
//иметь разные реализации или подклассы.
//
//"Абстрактная фабрика" предоставляет интерфейс для создания семейств объектов, не указывая их конкретных классов,
//что позволяет создавать разные реализации объектов или платформозависимые варианты. В то время как "Фабрика"
//предоставляет интерфейс для создания одного объекта, позволяя подклассам или реализациям изменять тип создаваемых объектов.
//
//"Абстрактная фабрика" обычно использует другие паттерны, такие как "Фабрика" или "Строитель" для создания объектов
//внутри семейства. "Фабрика" сама по себе является паттерном, который используется для создания объектов на основе
//определенных условий или параметров.
//
//В целом, основное отличие между паттернами "Абстрактная фабрика" и "Фабрика" заключается в том,
//что "Абстрактная фабрика" используется для создания семейств взаимосвязанных объектов с разными реализациями,
//в то время как "Фабрика" используется для создания одиночных объектов с разными реализациями или подклассами.

type Button interface {
	Render() string
}

type WindowsButton struct{}

func (w WindowsButton) Render() string {
	return "Windows Button"
}

type MacOSButton struct{}

func (m MacOSButton) Render() string {
	return "MacOS Button"
}

type GUIFactory interface {
	CreateButton() Button
}

type WindowsFactory struct{}

func (wf WindowsFactory) CreateButton() Button {
	return WindowsButton{}
}

type MacOSFactory struct{}

func (mf MacOSFactory) CreateButton() Button {
	return MacOSButton{}
}

func main() {
	var factory GUIFactory

	// Здесь можно определить условия выбора нужной фабрики на основе конфигурации или окружения.
	factory = WindowsFactory{}

	button := factory.CreateButton()
	fmt.Println(button.Render())
}
